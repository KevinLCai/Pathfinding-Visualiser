(window["webpackJsonpmy-app"]=window["webpackJsonpmy-app"]||[]).push([[0],[,,,,,,,,,function(e,t,n){e.exports=n(18)},,,,,function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),i=n(7),o=n.n(i),s=(n(14),n(15),n(8)),l=n(1),c=n(2),h=n(4),u=n(3),d=n(5),f=(n(16),n(17),function(e){function t(){return Object(l.a)(this,t),Object(h.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(d.a)(t,e),Object(c.a)(t,[{key:"render",value:function(){var e=this.props,t=e.row,n=e.col,a=e.isStart,i=e.isFinish,o=e.isWall,s=e.onMouseDown,l=e.onMouseEnter,c=e.onMouseUp,h=e.isWeight,u=e.isVisited,d=e.isVisitedWeight,f=u&&h?"node-visited node-weight":i?"node-finish":a?"node-start":o?"node-wall":h?"node-weight":d?"node-visited-weight":u?"node-visited":"";return r.a.createElement("div",{id:"node-".concat(t,"-").concat(n),className:"node ".concat(f),onMouseDown:function(){return s(t,n)},onMouseEnter:function(){return l(t,n)},onMouseUp:function(){return c()}})}}]),t}(a.Component));function m(e,t,n){var a=[];t.distance=0;for(var r=function(e){var t=[],n=!0,a=!1,r=void 0;try{for(var i,o=e[Symbol.iterator]();!(n=(i=o.next()).done);n=!0){var s=i.value,l=!0,c=!1,h=void 0;try{for(var u,d=s[Symbol.iterator]();!(l=(u=d.next()).done);l=!0){var f=u.value;t.push(f)}}catch(m){c=!0,h=m}finally{try{l||null==d.return||d.return()}finally{if(c)throw h}}}}catch(m){a=!0,r=m}finally{try{n||null==o.return||o.return()}finally{if(a)throw r}}return t}(e);r.length;){p(r);var i=r.shift();if(!i.isWall){if(i.distance===1/0)return a;if(i.isVisited=!0,i.isWeight&&(i.distance=i.distance+6),a.push(i),i===n)return a;g(i,e)}}}function p(e){e.sort((function(e,t){return e.distance-t.distance}))}function g(e,t){var n=function(e,t){var n=[],a=e.col,r=e.row;r>0&&n.push(t[r-1][a]);r<t.length-1&&n.push(t[r+1][a]);a>0&&n.push(t[r][a-1]);a<t[0].length-1&&n.push(t[r][a+1]);return n.filter((function(e){return!e.isVisited}))}(e,t),a=!0,r=!1,i=void 0;try{for(var o,s=n[Symbol.iterator]();!(a=(o=s.next()).done);a=!0){var l=o.value;l.distance=e.distance+1,l.previousNode=e}}catch(c){r=!0,i=c}finally{try{a||null==s.return||s.return()}finally{if(r)throw i}}}var v,w,y=[],b=[],E=[];function k(e,t,n){for(E=function(e){var t=[],n=!0,a=!1,r=void 0;try{for(var i,o=e[Symbol.iterator]();!(n=(i=o.next()).done);n=!0){var s=i.value,l=!0,c=!1,h=void 0;try{for(var u,d=s[Symbol.iterator]();!(l=(u=d.next()).done);l=!0){var f=u.value;t.push(f)}}catch(m){c=!0,h=m}finally{try{l||null==d.return||d.return()}finally{if(c)throw h}}}}catch(m){a=!0,r=m}finally{try{n||null==o.return||o.return()}finally{if(a)throw r}}return t}(e),t.distance=0;E.length;){D(E);var a=E.shift();if(a.isVisited=!0,!a.isWall){if(a.isWeight&&(a.distance=75),a.distance===1/0)return y;if(y.push(a),a===n)return y;j(a,e)}}return y}function S(e,t,n,a){var r=Math.pow(e-n,2);r=Math.pow(r,2);var i=Math.pow(t-a,2);return i=Math.pow(i,2),Math.pow(r+i,.5)}function D(e){e.sort((function(e,t){return e.distance+S(e.row,e.col,v,w)-(t.distance+S(t.row,t.col,v,w))}))}function j(e,t){var n=function(e,t){var n=[],a=e.col,r=e.row;r>0&&n.push(t[r-1][a]);r<t.length-1&&n.push(t[r+1][a]);a>0&&n.push(t[r][a-1]);a<t[0].length-1&&n.push(t[r][a+1]);return n.filter((function(e){return!e.isVisited}))}(e,t),a=!0,r=!1,i=void 0;try{for(var o,s=n[Symbol.iterator]();!(a=(o=s.next()).done);a=!0){var l=o.value;l.isWeight?(l.distance=e.distance+10,l.previousNode=e):(l.distance=e.distance+1,l.previousNode=e)}}catch(c){r=!0,i=c}finally{try{a||null==s.return||s.return()}finally{if(r)throw i}}}var W,N,O=[],I=[];function M(e,t){var n=[],a=e.row,r=e.col;return a>0&&n.push(t[a-1][r]),a<t.length-1&&n.push(t[a+1][r]),r>0&&n.push(t[a][r-1]),r<t[0].length-1&&n.push(t[a][r+1]),n.filter((function(e){return!e.isVisited}))}function P(e,t,n){return O=[],I=[],W=n.row,N=n.col,function(e,t,n){var a=e[t][n];a.isVisited=!0,a.previousNode=null,a.distance=0;var r=[];for(r.push(a);r.length>0;){var i=r.shift();if(O.push(i),i.row==W&&i.col==N)return;var o=M(i,e),s=!0,l=!1,c=void 0;try{for(var h,u=o[Symbol.iterator]();!(s=(h=u.next()).done);s=!0){var d=h.value;d.isWall||!1===d.isVisited&&(r.push(d),d.previousNode=i,d.isVisited=!0,d.distance=i.distance+1)}}catch(f){l=!0,c=f}finally{try{s||null==u.return||u.return()}finally{if(l)throw c}}}}(e,t.row,t.col),O}var A,C,B=[],V=[],F=0,T=1;function x(e,t,n,a,r){var i=e[t][n];if(!i.isWall){if(B.push(i),i.isVisited=!0,i.previousNode=a,i.distance=r,t===A&&n===C)return V.push(i),void(F=1);var o=function(e,t){var n=[],a=e.row,r=e.col;a>0&&n.push(t[a-1][r]);a<t.length-1&&n.push(t[a+1][r]);r>0&&n.push(t[a][r-1]);r<t[0].length-1&&n.push(t[a][r+1]);return n.filter((function(e){return!e.isVisited}))}(i,e);0===T&&o.sort((function(){return Math.random()-.5}));var s=!0,l=!1,c=void 0;try{for(var h,u=o[Symbol.iterator]();!(s=(h=u.next()).done);s=!0){var d=h.value;if(!1===d.isVisited&&(x(e,d.row,d.col,i,r+1),F)){V.push(i),i.previousNode=a;break}}}catch(f){l=!0,c=f}finally{try{s||null==u.return||u.return()}finally{if(l)throw c}}}}function G(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function U(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?G(n,!0).forEach((function(t){Object(s.a)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):G(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var H,L,R=10,q=15,K=10,z=35,_=!1,J=!1,Z=!1,X=[],Y=function(e){function t(){var e;return Object(l.a)(this,t),(e=Object(h.a)(this,Object(u.a)(t).call(this))).addWeights=function(e){e.pop()?e.push(!1):e.push(!0),console.log(e),console.log(e[0])},e.state={grid:[],mouseIsPressed:!1},e}return Object(d.a)(t,e),Object(c.a)(t,[{key:"componentDidMount",value:function(){var e=$();this.setState({grid:e}),localStorage.getItem("visted")||(te(),localStorage.setItem("visted",!0))}},{key:"handleMouseDown",value:function(e,t){if(!_){var n=ee(this.state.grid,e,t);this.setState({grid:n,mouseIsPressed:!0})}}},{key:"handleMouseEnter",value:function(e,t){if(this.state.mouseIsPressed){var n=ee(this.state.grid,e,t);this.setState({grid:n})}}},{key:"handleMouseUp",value:function(){this.setState({mouseIsPressed:!1}),J=!1,Z=!1}},{key:"animateAlgorithm",value:function(e,t){for(var n=this,a=function(a){if(a===e.length)return setTimeout((function(){n.animateShortestPath(t)}),10*a),{v:void 0};setTimeout((function(){var t=e[a];t.isWeight?document.getElementById("node-".concat(t.row,"-").concat(t.col)).className="node node-visited node-weight":document.getElementById("node-".concat(t.row,"-").concat(t.col)).className="node node-visited"}),10*a)},r=0;r<=e.length;r++){var i=a(r);if("object"===typeof i)return i.v}}},{key:"visualise",value:function(e){if(!_){_=!0;var t=this.state.grid,n=t[R][q],a=t[K][z];"dijkstra"===e?(H=m(t,n,a),L=function(e){for(var t=[],n=e;null!==n;)t.unshift(n),n=n.previousNode;return t}(a)):"AStar"===e?(H=function(e,t,n){return y=[],b=[],v=n.row,w=n.col,k(e,t,n)}(t,n,a),L=function(e){for(var t=e;null!==t;)b.unshift(t),t=t.previousNode;return b}(a)):"BFS"===e?(H=P(t,n,a),L=function(e){for(var t=e;t;)I.unshift(t),t=t.previousNode;return I}(a)):"DFS"===e&&(H=function(e,t,n,a){return B=[],V=[],F=0,A=n.row,C=n.col,T=a,x(e,t.row,t.col,null,0),B}(t,n,a),V.reverse(),L=V),this.animateAlgorithm(H,L)}}},{key:"animateShortestPath",value:function(e){for(var t=function(t){setTimeout((function(){var n=e[t];"node node-visited"===document.getElementById("node-".concat(n.row,"-").concat(n.col)).className&&(document.getElementById("node-".concat(n.row,"-").concat(n.col)).className="node node-shortest-path")}),20*t)},n=0;n<e.length;n++)t(n)}},{key:"render",value:function(){var e=this,t=this.state,n=t.grid,a=t.mouseIsPressed;return r.a.createElement("div",null,r.a.createElement("div",{class:"full-panel"},r.a.createElement("div",{class:"panel"},r.a.createElement("button",{onClick:function(){return e.visualise("dijkstra")},class:"btn btn-primary",title:"Dijkstra's algorithm is a weighted search algorithm which guarantees the shortest path between two nodes. Press the 'Deforest' button to  remove parts of the forest (essentially adding weights to the search algorithm). Dijkstra's algorithm is a good visual representation of  a forest-fire especially since deforested nodes (weights) can slow down the spread of fire."},"Dijkstra's Algorithm")),r.a.createElement("div",{class:"panel"},r.a.createElement("button",{onClick:function(){return e.visualise("AStar")},class:"btn btn-warning",title:"A* Search is a weighted search algorithm which guarantees the shortest path between two nodes. A* is a version of Dijkstra's  algorithm, but with a heuristic that moves in the direction of the finish node. Press the 'Deforest' button to  remove parts of the forest (essentially adding weights to the search algorithm)."},"A* Search")),r.a.createElement("div",{class:"panel"},r.a.createElement("button",{onClick:function(){return e.visualise("BFS")},class:"btn btn-danger",title:"Breadth-first-search is an unweighted search algorithm, it will therefore ignore any deforested nodes placed on the map. It guarantees the shortest path between two points and is a good model for the spread of fire."},"Breadth-first search")),r.a.createElement("div",{class:"panel"},r.a.createElement("button",{onClick:function(){return e.visualise("DFS")},class:"btn btn-info",title:"Depth-first-search is an unweighted search algorithm, it will therefore ignore any deforested nodes placed on the map. It does not guarantee the shortest path between two points and is not analagous to the spread of fire."},"Depth-first search")),r.a.createElement("div",{class:"panel"},r.a.createElement("button",{onClick:function(){return e.addWeights(X)},class:"btn btn-success",title:"The deforest button can be toggled on and off. When toggle on it allows you to place weighted nodes which are analgous to deforesting the map. When toggled off, it allows you to place wall nodes. Have a go!"},"Deforest")),r.a.createElement("div",{class:"panel"},r.a.createElement("button",{onClick:function(){window.location.reload()},class:"btn btn-light",title:"Resets the board entirely."},"Reset Board")),r.a.createElement("div",{class:"panel"},r.a.createElement("button",{onClick:function(){return te()},class:"btn btn-default",title:"Open the information window."},"Info"))),r.a.createElement("div",{id:"overlay"},r.a.createElement("div",{id:"navigator"},r.a.createElement("div",null,r.a.createElement("h1",null,"Hello! Welcome to Kevin Cai's Forest Fire Simulator!"),r.a.createElement("p",null,"This simulator uses different Pathfinding Algorithms including: Dijkstra's algorithm, A* Search, Breadth-first-search and Depth-first-search. Each with varying levels of accuracy at simulating forest fires. I shall walk you through the functionality of this web application.")),r.a.createElement("div",null,r.a.createElement("h1",null,"What is a Pathfinding Algorithm?"),r.a.createElement("p",null,"A pathfinding algorithm seeks to find the shortest path between two points, this application aims to visualise different algorithms and apply them towards simulating the spread of fire within a forest. These algorithms have been applied to a 2 dimensional grid.")),r.a.createElement("div",null,r.a.createElement("h1",null,"Different Nodes:"),r.a.createElement("div",null,r.a.createElement("img",{src:"https://i.pinimg.com/originals/af/ab/26/afab26f2c1d6ef0cd3402dd5ef77e2de.jpg",alt:"Flame"}),r.a.createElement("p",{class:"p-node"},"This is the ",r.a.createElement("strong",null,"Start Node"),", where the fire will start. Click and drag it to move its position.")),r.a.createElement("div",null,r.a.createElement("img",{src:"https://upload.wikimedia.org/wikipedia/commons/thumb/7/70/Checkerboard_pattern.svg/1024px-Checkerboard_pattern.svg.png",alt:"Checkerboard"}),r.a.createElement("p",{class:"p-node"},"This is the ",r.a.createElement("strong",null,"Finish Node"),", where the simulation will end. Click and drag it to move its position.")),r.a.createElement("div",null,r.a.createElement("img",{src:"https://www.htmlcsscolor.com/preview/gallery/008000.png",alt:"Green Square"}),r.a.createElement("p",{class:"p-node"},"This is a ",r.a.createElement("strong",null,"Tree Node"),", these nodes can be burned down and allow the spread of fire.")),r.a.createElement("div",null,r.a.createElement("img",{src:"https://lh3.googleusercontent.com/PGDDIlrdxLg8-6jGX-O_fw2xcV6fO1PcRcm1cbxMrmtrUODDtkZC9Hl05G2KAAkbcub39SUinulK6NKZmnN9=s400",alt:"Clay Brick Square"}),r.a.createElement("p",{class:"p-node"},"This is a ",r.a.createElement("strong",null,"Wall Node"),", fire cannot pass through this node. Click and drag on the map to create walls!")),r.a.createElement("div",null,r.a.createElement("img",{src:"https://www.jordanreflectors.co.uk/wp-content/uploads/2016/05/Opallite-Recessed-LED-Luminaires-black-border-670px.jpg",alt:"White Square"}),r.a.createElement("p",{class:"p-node"},"This is a ",r.a.createElement("strong",null,"Deforested/Weighted Node"),', this increases the difficulty for the fire to spread (affects weighted algorithms - Dijkstra\'s algorithm and A* Search). Click the "Deforest" button to toggle on deforestation - then click and drag on the map to deforest.')),r.a.createElement("div",null,r.a.createElement("img",{src:"https://i.pinimg.com/originals/b6/e1/44/b6e14486d7b5930471fabad8aa2cab19.jpg",alt:"Yellow Brick Square"}),r.a.createElement("p",{class:"p-node"},"This is a ",r.a.createElement("strong",null,"Shortest-path Node"),", which maps out the shortest path between the Start Node and the Finish Node. Follow the yellow brick road! (Note: for Depth-first-search, this path is certainly not the shortest path!)"))),r.a.createElement("div",null,r.a.createElement("h1",null,"Search algorithms:"),r.a.createElement("ul",null,r.a.createElement("li",null,r.a.createElement("strong",null,"Dijkstra's Algorithm:")," a weighted search algorithm which guarantees the shortest path between two nodes. Dijkstra's algorithm is a good visual representation of a forest-fire especially since deforested nodes (weights) can slow down the spread of fire."),r.a.createElement("li",null,r.a.createElement("strong",null,"A* Search:")," a weighted search algorithm which guarantees the shortest path between two nodes. A* is a version of Dijkstra's algorithm, but with a heuristic that moves in the direction of the finish node. A* Search is a poor visual representation of the spread of fire, however, has other fascinating use cases - it is the algorithm Google use for Google Maps! "),r.a.createElement("li",null,r.a.createElement("strong",null,"Breadth-first-search:")," an unweighted search algorithm, it will therefore ignore any deforested nodes placed on the map. It does not guarantee the shortest path between two points and follows a similar path as the spread of fire, however, it ignores any deforestation. A common application of this search algorithm is in Peer to Peer networks to find neighbouring nodes."),r.a.createElement("li",null,r.a.createElement("strong",null,"Depth-first-search:")," an unweighted search algorithm, it will therefore ignore any deforested nodes placed on the map. It does not guarantee the shortest path between two points and is not analagous to the spread of fire. Depth first search can be used to solve puzzles with only one solution, e.g. solve a maze.")))),r.a.createElement("button",{onClick:function(){document.getElementById("overlay").style.display="none"},class:"btn btn-default",id:"overlay-button"},"Hide Window")),r.a.createElement("div",{className:"grid"},n.map((function(t,n){return r.a.createElement("div",{key:n},t.map((function(t,n){var i=t.row,o=t.col,s=t.isFinish,l=t.isStart,c=t.isWall,h=t.isWeight,u=t.isVisited,d=t.isVisitedWeight;return r.a.createElement(f,{key:n,col:o,isFinish:s,isStart:l,isWall:c,isWeight:h,isVisited:u,isVisitedWeight:d,mouseIsPressed:a,onMouseDown:function(t,n){return e.handleMouseDown(t,n)},onMouseEnter:function(t,n){return e.handleMouseEnter(t,n)},onMouseUp:function(){return e.handleMouseUp()},row:i})})))}))))}}]),t}(a.Component),$=function(){for(var e=[],t=0;t<20;t++){for(var n=[],a=0;a<50;a++)n.push(Q(a,t));e.push(n)}return e},Q=function(e,t){return{col:e,row:t,isStart:t===R&&e===q,isFinish:t===K&&e===z,distance:1/0,isVisited:!1,isWall:!1,previousNode:null,isWeight:!1}},ee=function(e,t,n){var a=e.slice(),r=a[t][n],i=a[t][n];if(r.isFinish||r.isStart||J||X[0]||Z||J){if(X[0])console.log("WEIGHTS"),i=U({},r,{isWeight:!0});else if(a[t][n].row===K&&a[t][n].col===z)J=!0;else if(J){console.log("FINISH"),i=U({},r,{isFinish:!0}),K=a[t][n].row,z=a[t][n].col;for(var o=0;o<20;o++)for(var s=0;s<50;s++)a[o][s].isFinish&&(document.getElementById("node-".concat(o,"-").concat(s)).className="node")}else if(a[t][n].isStart)Z=!0;else if(Z){console.log("START"),i=U({},r,{isStart:!0}),R=a[t][n].row,q=a[t][n].col;for(var l=0;l<20;l++)for(var c=0;c<50;c++)a[l][c].isStart&&(document.getElementById("node-".concat(l,"-").concat(c)).className="node")}}else console.log("WALLS"),i=U({},r,{isWall:!r.isWall});return a[t][n]=i,a};function te(){document.getElementById("overlay").style.display="block"}var ne=function(){return r.a.createElement("div",{className:"App"},r.a.createElement(Y,null))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));o.a.render(r.a.createElement(ne,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()}))}],[[9,1,2]]]);
//# sourceMappingURL=main.bcb38299.chunk.js.map